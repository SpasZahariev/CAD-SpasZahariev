# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-api-cad # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-1:*:*"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /get-hello
          method: get
          cors: true
  imageResize:
    handler: handler.imageResize
    events:
      - http:
          path: /image-resize
          method: get
          cors: true
  postUser:
    handler: users/postUser.postUser
    events:
      - http:
          path: users/post
          method: post
          cors: true
  queryByUser:
    handler: projects/queryByUser.queryByUser
    events:
      - http:
          path: projects/query
          method: post
          cors: true
  getUsers:
    handler: users/getUsers.getUsers
    events:
      - http:
          path: users/get-all
          method: get
          cors: true
  getUser:
    handler: users/getUser.getUser
    events:
      - http:
          path: users/get
          method: post
          cors: true
  deleteUser:
    handler: users/deleteUser.deleteUser
    events:
      - http:
          path: users/delete
          method: post
          cors: true
  updateUser:
    handler: users/updateUser.updateUser
    events:
      - http:
          path: users/update
          method: post
          cors: true
  postProject:
    handler: projects/postProject.postProject
    events:
      - http:
          path: projects/post
          method: post
          cors: true
  deleteProject:
    handler: projects/deleteProject.deleteProject
    events:
      - http:
          path: projects/delete
          method: post
          cors: true
  updateProject:
    handler: projects/updateProject.updateProject
    events:
      - http:
          path: projects/update
          method: post
          cors: true
  getProjects:
    handler: projects/getProjects.getProjects
    events:
      - http:
          path: projects/get-all
          method: get
          cors: true
  getProject:
    handler: projects/getProject.getProject
    events:
      - http:
          path: projects/get
          method: post
          cors: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
  UsersDynamoDbTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: 'users'
  ProjectsDynamoDbTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: 'projects'
  # CognitoUserPool:
  #   Type: 'AWS::Cognito::UserPool'
  #   Properties:
  #     # name can be based on stage ${self:custom.stage}-user-pool
  #     UserPoolName: teammate-pool
  #     # set email as an alias
  #     UsernameAttributes:
  #       - email
  #     AutoVerifiedAttributes:
  #       - email
  # CognitoUserPoolClient:
  #   Type: 'AWS::Cognito::UserPoolClient'
  #   Properties:
  #     # generate app client name based on stage ${self:custom.stage}-user-pool-client
  #     ClientName: teammate-pool-client
  #     UserPoolId:
  #       Ref: CognitoUserPool
  #     ExplicitAuthFlows:
  #       - ADMIN_NO_SRP_AUTH
  #     GenerateSecret: false
  # CognitoIdentityPool:
  #   # identities for the users to authenticate with
  #   CognitoIdentityPool:
  #     Type: 'AWS::Cognito::IdentityPool'
  #     Properties:
  #       IdentityPoolName: Identity-pool
  #       # Don't allow unauthenticated users
  #       AllowUnauthenticatedIdentities: false
  #       # Link to User Pool
  #       CognitoIdentityProviders:
  #         - ClientIde:
  #             Ref: CognitoUserPoolClient
  #           ProviderName:
  #             Fn:GetAtt: ["CognitoUserPool", "ProviderName"]
  # CognitoIdentityPoolRoles:
  #   # IAM roles
  #   Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
  #   Properties:
  #     IdentityPoolId:
  #       Ref: CognitoIdentityPool
  #     Roles:
  #       authenticated:
  #         Fn::GetAtt: [CognitoAuthRole, Arn]

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
  # Outputs:
  #   UserPoolId:
  #     Value:
  #       Ref: CognitoUserPool
  #   UserPoolClientId:
  #     Value:
  #       Ref: CognitoUserPoolClient

#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
